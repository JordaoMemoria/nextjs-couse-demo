{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jordaomemoria/Documents/projects/nextjs2/pages/[meetupId].js\";\nimport { MongoClient } from 'mongodb';\nimport MeetupDetail from '../components/meetups/MeetupDetail';\nexport default function MeetupDetails(props) {\n  const {\n    image,\n    title,\n    address,\n    description\n  } = props;\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    image: image,\n    title: title,\n    address: address,\n    description: description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 3\n  }, this);\n}\nexport const getStaticPaths = async () => {\n  const client = await MongoClient.connect('mongodb+srv://jordao:ljmpr1616@cluster0.7anjc.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = await client.db();\n  const meetupsCollection = db.collection('meetups');\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray();\n  client.close();\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n};\nexport const getStaticProps = async context => {\n  const {\n    meetupId\n  } = context.params; // fetch data for a single meetup\n\n  const client = await MongoClient.connect('mongodb+srv://jordao:ljmpr1616@cluster0.7anjc.mongodb.net/meetups?retryWrites=true&w=majority');\n  const db = await client.db();\n  const meetupsCollection = db.collection('meetups');\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: meetupId\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: selectedMeetup\n    }\n  };\n};","map":{"version":3,"sources":["/Users/jordaomemoria/Documents/projects/nextjs2/pages/[meetupId].js"],"names":["MongoClient","MeetupDetail","MeetupDetails","props","image","title","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","close","fallback","paths","map","meetup","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","meetupData"],"mappings":";;AAAA,SAASA,WAAT,QAA4B,SAA5B;AACA,OAAOC,YAAP,MAAyB,oCAAzB;AAEA,eAAe,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5C,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,KAAT;AAAgBC,IAAAA,OAAhB;AAAyBC,IAAAA;AAAzB,MAAyCJ,KAA/C;AACA,sBACC,QAAC,YAAD;AACC,IAAA,KAAK,EAAEC,KADR;AAEC,IAAA,KAAK,EAAEC,KAFR;AAGC,IAAA,OAAO,EAAEC,OAHV;AAIC,IAAA,WAAW,EAAEC;AAJd;AAAA;AAAA;AAAA;AAAA,UADD;AAQA;AAED,OAAO,MAAMC,cAAc,GAAG,YAAY;AACzC,QAAMC,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACpB,+FADoB,CAArB;AAGA,QAAMC,EAAE,GAAG,MAAMF,MAAM,CAACE,EAAP,EAAjB;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB;AACAR,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNC,IAAAA,QAAQ,EAAE,KADJ;AAENC,IAAAA,KAAK,EAAEN,OAAO,CAACO,GAAR,CAAYC,MAAM,KAAK;AAC7BC,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEF,MAAM,CAACN,GAAP,CAAWS,QAAX;AAAZ;AADqB,KAAL,CAAlB;AAFD,GAAP;AAMA,CAfM;AAiBP,OAAO,MAAMC,cAAc,GAAG,MAAMC,OAAN,IAAiB;AAC9C,QAAM;AAAEH,IAAAA;AAAF,MAAeG,OAAO,CAACJ,MAA7B,CAD8C,CAE9C;;AACA,QAAMd,MAAM,GAAG,MAAMT,WAAW,CAACU,OAAZ,CACpB,+FADoB,CAArB;AAGA,QAAMC,EAAE,GAAG,MAAMF,MAAM,CAACE,EAAP,EAAjB;AACA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMe,cAAc,GAAG,MAAMhB,iBAAiB,CAACiB,OAAlB,CAA0B;AAAEb,IAAAA,GAAG,EAAEQ;AAAP,GAA1B,CAA7B;AACAf,EAAAA,MAAM,CAACS,KAAP;AAEA,SAAO;AACNf,IAAAA,KAAK,EAAE;AACN2B,MAAAA,UAAU,EAAEF;AADN;AADD,GAAP;AAKA,CAhBM","sourcesContent":["import { MongoClient } from 'mongodb'\nimport MeetupDetail from '../components/meetups/MeetupDetail'\n\nexport default function MeetupDetails(props) {\n\tconst { image, title, address, description } = props\n\treturn (\n\t\t<MeetupDetail\n\t\t\timage={image}\n\t\t\ttitle={title}\n\t\t\taddress={address}\n\t\t\tdescription={description}\n\t\t/>\n\t)\n}\n\nexport const getStaticPaths = async () => {\n\tconst client = await MongoClient.connect(\n\t\t'mongodb+srv://jordao:ljmpr1616@cluster0.7anjc.mongodb.net/meetups?retryWrites=true&w=majority'\n\t)\n\tconst db = await client.db()\n\tconst meetupsCollection = db.collection('meetups')\n\tconst meetups = await meetupsCollection.find({}, { _id: 1 }).toArray()\n\tclient.close()\n\n\treturn {\n\t\tfallback: false,\n\t\tpaths: meetups.map(meetup => ({\n\t\t\tparams: { meetupId: meetup._id.toString() },\n\t\t})),\n\t}\n}\n\nexport const getStaticProps = async context => {\n\tconst { meetupId } = context.params\n\t// fetch data for a single meetup\n\tconst client = await MongoClient.connect(\n\t\t'mongodb+srv://jordao:ljmpr1616@cluster0.7anjc.mongodb.net/meetups?retryWrites=true&w=majority'\n\t)\n\tconst db = await client.db()\n\tconst meetupsCollection = db.collection('meetups')\n\tconst selectedMeetup = await meetupsCollection.findOne({ _id: meetupId })\n\tclient.close()\n\n\treturn {\n\t\tprops: {\n\t\t\tmeetupData: selectedMeetup,\n\t\t},\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}